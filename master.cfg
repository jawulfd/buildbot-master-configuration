# -*- python -*-
# ex: set filetype=python:

import os
from buildbot.plugins import *

c = BuildmasterConfig = {}

c['buildbotNetUsageData'] = None

c['secretsProviders'] = [
    secrets.HashiCorpVaultKvSecretProvider(
        authenticator=secrets.VaultAuthenticatorApprole(
            roleId=os.environ.get("VAULT_ROLE_ID"),
            secretId=os.environ.get("VAULT_SECRET_ID")
        ),
        vault_server=os.environ.get("VAULT_URL"),
        secrets_mount="secrets"
    )
]

####### WORKERS

c['workers'] = [
    worker.KubeLatentWorker(
        "buildbot-kubeworker-python",
        image="buildbot/buildbot-worker:v4.3.0",
        namespace="buildbot-python",
        kube_config=util.KubeInClusterConfigLoader()
    ),
    worker.KubeLatentWorker(
        "buildbot-kubeworker-jdk17",
        image="buildbot/buildbot-worker:v4.3.0",
        namespace="buildbot-jdk",
        kube_config=util.KubeInClusterConfigLoader()
    ),
    worker.KubeLatentWorker(
        "buildbot-kubeworker-jdk21",
        image="buildbot/buildbot-worker:v4.3.0",
        namespace="buildbot-jdk",
        kube_config=util.KubeInClusterConfigLoader()
    ),
    worker.KubeLatentWorker(
        "buildbot-kubeworker-node20",
        image="buildbot/buildbot-worker:v4.3.0",
        namespace="buildbot-node",
        kube_config=util.KubeInClusterConfigLoader()
    ),
    worker.KubeLatentWorker(
        "buildbot-kubeworker-node22",
        image="buildbot/buildbot-worker:v4.3.0",
        namespace="buildbot-node",
        kube_config=util.KubeInClusterConfigLoader()
    )
]

c['db'] = {
    'db_url' : f"postgresql+psycopg://{os.environ.get('POSTGRES_USER')}:{os.environ.get('POSTGRES_PASSWORD')}@{os.environ.get('POSTGRES_HOST')}/buildbot"
}

c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'https://github.com/jawulfd/telegram-bot-aemet.git',
        workdir='gitpoller-workdir', branch='master',
        pollInterval=300))

####### SCHEDULERS

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))

####### BUILDERS

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='https://github.com/jawulfd/telegram-bot-aemet.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(steps.ShellCommand(command=["echo", "testing"],
                                  env={"PYTHONPATH": "."}))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="runtests",
      workernames=["buildbot-kubeworker-python"],
      factory=factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Buildbot CI"
c['titleURL'] = "https://buildbot.github.io/hello-world/"

c['buildbotURL'] = "http://localhost:8010/"
# c['buildbotURL'] = "https://buildbot.jauwlfd.ci/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
